use core::fmt;
use std::io;

#[derive(Clone)]
pub enum HttpStatusCode {
    Continue100,
    SwitchingProtocols101,
    OK200,
    Created201,
    Accepted202,
    NonAuthoritativeInformation203,
    NoContent204,
    ResetContent205,
    PartialContent206,
    MultipleChoices300,
    MovedPermanently301,
    Found302,
    SeeOther303,
    NotModified304,
    UseProxy305,
    TemporaryRedirect307,
    PermanentRedirect308,
    BadRequest400,
    Unauthorized401,
    PaymentRequired402,
    Forbidden403,
    NotFound404,
    MethodNowAllowed405,
    NotAcceptable406,
    ProxyAuthenticationRequired407,
    RequestTimeout408,
    Conflict409,
    Gone410,
    LengthRequired411,
    PreconditionFailed412,
    ContentTooLarge413,
    UriTooLong414,
    UnsupportedMediaType415,
    RangeNotSatisfiable416,
    ExpectationFailed417,
    MisdirectedRequest421,
    UnprocessableContent422,
    UpgradeRequired426,
    InternalServerError500,
    NotImplemented501,
    BadGateway502,
    ServiceUnavailable503,
    GatewayTimeout504,
    HttpVersionNotSupported505,
}

impl HttpStatusCode {
    pub fn from_io_error(error: &io::Error) -> Self {
        // Errors commented out below are unstable.
        match error.kind() {
            io::ErrorKind::NotFound => Self::NotFound404,
            io::ErrorKind::PermissionDenied => Self::NotFound404, // Don't use Forbidden403: prevent attackers from learning which files exist
            io::ErrorKind::ConnectionRefused => Self::BadGateway502,
            io::ErrorKind::ConnectionReset => Self::BadGateway502,
            //io::ErrorKind::HostUnreachable => todo!(),
            //io::ErrorKind::NetworkUnreachable => todo!(),
            io::ErrorKind::ConnectionAborted => Self::BadGateway502,
            io::ErrorKind::NotConnected => Self::GatewayTimeout504,
            io::ErrorKind::AddrInUse => Self::InternalServerError500,
            io::ErrorKind::AddrNotAvailable => Self::InternalServerError500,
            //io::ErrorKind::NetworkDown => todo!(),
            io::ErrorKind::BrokenPipe => Self::InternalServerError500,
            io::ErrorKind::AlreadyExists => Self::Conflict409,
            io::ErrorKind::WouldBlock => Self::InternalServerError500,
            //io::ErrorKind::NotADirectory => todo!(),
            //io::ErrorKind::IsADirectory => todo!(),
            //io::ErrorKind::DirectoryNotEmpty => todo!(),
            //io::ErrorKind::ReadOnlyFilesystem => todo!(),
            //io::ErrorKind::FilesystemLoop => todo!(),
            //io::ErrorKind::StaleNetworkFileHandle => todo!(),
            io::ErrorKind::InvalidInput => Self::InternalServerError500,
            io::ErrorKind::InvalidData => Self::InternalServerError500,
            io::ErrorKind::TimedOut => Self::InternalServerError500,
            io::ErrorKind::WriteZero => Self::InternalServerError500,
            //io::ErrorKind::StorageFull => todo!(),
            //io::ErrorKind::NotSeekable => todo!(),
            //io::ErrorKind::FilesystemQuotaExceeded => todo!(),
            //io::ErrorKind::FileTooLarge => todo!(),
            //io::ErrorKind::ResourceBusy => todo!(),
            //io::ErrorKind::ExecutableFileBusy => todo!(),
            //io::ErrorKind::Deadlock => todo!(),
            //io::ErrorKind::CrossesDevices => todo!(),
            //io::ErrorKind::TooManyLinks => todo!(),
            //io::ErrorKind::InvalidFilename => todo!(),
            //io::ErrorKind::ArgumentListTooLong => todo!(),
            io::ErrorKind::Interrupted => Self::InternalServerError500,
            io::ErrorKind::Unsupported => Self::InternalServerError500,
            io::ErrorKind::UnexpectedEof => Self::InternalServerError500,
            io::ErrorKind::OutOfMemory => Self::InternalServerError500,
            io::ErrorKind::Other => Self::InternalServerError500,
            _ => Self::InternalServerError500,
        }
    }
}

impl fmt::Display for HttpStatusCode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let text = match self {
            HttpStatusCode::Continue100 => "100 CONTINUE",
            HttpStatusCode::SwitchingProtocols101 => "101 SWITCHING PROTOCOLS",
            HttpStatusCode::OK200 => "200 OK",
            HttpStatusCode::Created201 => "201 CREATED",
            HttpStatusCode::Accepted202 => "202 ACCEPTED",
            HttpStatusCode::NonAuthoritativeInformation203 => "203 NON AUTHORITATIVE INFORMATION",
            HttpStatusCode::NoContent204 => "204 NO CONTENT",
            HttpStatusCode::ResetContent205 => "205 RESET CONTENT",
            HttpStatusCode::PartialContent206 => "206 PARTIAL CONTENT",
            HttpStatusCode::MultipleChoices300 => "300 MULTIPLE CHOICES",
            HttpStatusCode::MovedPermanently301 => "301 MOVED PERMANENTLY",
            HttpStatusCode::Found302 => "302 FOUND",
            HttpStatusCode::SeeOther303 => "303 SEE OTHER",
            HttpStatusCode::NotModified304 => "304 NOT MODIFIED",
            HttpStatusCode::UseProxy305 => "305 USE PROXY",
            HttpStatusCode::TemporaryRedirect307 => "307 TEMPORARY REDIRECT",
            HttpStatusCode::PermanentRedirect308 => "308 PERMANENT REDIRECT",
            HttpStatusCode::BadRequest400 => "400 BAD REQUEST",
            HttpStatusCode::Unauthorized401 => "401 UNAUTHORIZED",
            HttpStatusCode::PaymentRequired402 => "402 PAYMENT REQUIRED",
            HttpStatusCode::Forbidden403 => "403 FORBIDDEN",
            HttpStatusCode::NotFound404 => "404 NOT FOUND",
            HttpStatusCode::MethodNowAllowed405 => "405 METHOD NOW ALLOWED",
            HttpStatusCode::NotAcceptable406 => "406 NOT ACCEPTABLE",
            HttpStatusCode::ProxyAuthenticationRequired407 => "407 PROXY AUTHENTICATION REQUIRED",
            HttpStatusCode::RequestTimeout408 => "408 REQUEST TIMEOUT",
            HttpStatusCode::Conflict409 => "409 CONFLICT",
            HttpStatusCode::Gone410 => "410 GONE",
            HttpStatusCode::LengthRequired411 => "411 LENGTH REQUIRED",
            HttpStatusCode::PreconditionFailed412 => "412 PRECONDITION FAILED",
            HttpStatusCode::ContentTooLarge413 => "413 CONTENT TOO LARGE",
            HttpStatusCode::UriTooLong414 => "414 URI TOO LONG",
            HttpStatusCode::UnsupportedMediaType415 => "415 UNSUPPORTED MEDIA TYPE",
            HttpStatusCode::RangeNotSatisfiable416 => "416 RANGE NOT SATISFIABLE",
            HttpStatusCode::ExpectationFailed417 => "417 EXPECTATION FAILED",
            HttpStatusCode::MisdirectedRequest421 => "421 MISDIRECTED REQUEST",
            HttpStatusCode::UnprocessableContent422 => "422 UNPROCESSABLE CONTENT",
            HttpStatusCode::UpgradeRequired426 => "426 UPGRADE REQUIRED",
            HttpStatusCode::InternalServerError500 => "500 INTERNAL SERVER ERROR",
            HttpStatusCode::NotImplemented501 => "501 NOT IMPLEMENTED",
            HttpStatusCode::BadGateway502 => "502 BAD GATEWAY",
            HttpStatusCode::ServiceUnavailable503 => "503 SERVICE UNAVAILABLE",
            HttpStatusCode::GatewayTimeout504 => "504 GATEWAY TIMEOUT",
            HttpStatusCode::HttpVersionNotSupported505 => "505 HTTP VERSION NOT SUPPORTED",
        };
        write!(f, "{text}")
    }
}
